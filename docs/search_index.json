[
["index.html", "Template Course Overview 0.1 Course Aims 0.2 Intended Learning Outcomes", " Template Course Lisa DeBruine 2019-01-28 Overview Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. 0.1 Course Aims Aim 1 Aim 2 Aim 3 0.2 Intended Learning Outcomes By the end of this course students will be able to: ILO 1 ILO 2 ILO 3 "],
["setup.html", "Chapter 1 Setup 1.1 Starting a new book 1.2 Adding chapters 1.3 Adding appendices", " Chapter 1 Setup The best resource for creating a course book is the bookdown website. Yihui Xie's Bookdown book can answer most of the questions you'll have. The guide below is just a quick start for the specific templates we're using at UofG Psychology. 1.1 Starting a new book 1.1.1 Create a new github repository For psyTeachR courses, the repository should be created by the course lead on the psyTeachR github and have a name structure like this: ug1-practical ug2-practical ug3-stats ug4-dissertation msc-data-skills 1.1.2 Fork the repository Our main course pages are under https://psyteachr.github.io, but you should work on your course page on a forked version in your own github account. On the Code tab of the new repository, click the Fork button. Figure 1.1: Fork a repository from the psyTeachR account If you're a member of psyTeachR, you'll get this interface telling you that you've already forked this project. You just need to choose your personal account. (#fig:img-already_forked)Choose your personal account You'll see this animation for a few seconds while the repository is being forked to your account. Figure 1.2: Just be patient 1.1.3 Make a new RStudio project Click the green Clone or download button on your personal forked repository and copy the URL (use HTTPS unless you know you've set up SSH). Figure 1.3: Find the URL to clone Under the File menu in RStudio, choose New Project... and choose Version Control from the list of options. (#fig:img-version_control)File &gt; New Project... &gt; Version Control Choose Git from the next screen. Figure 1.4: Choose Git Paste the URL you copied from your repository into the Repository URL. Keep the Project directory name the same as the repository name (it should default to this). You can Create the project as a subdirectory anywhere on your computer; I recommend making a directory to keep all your github R projects in. (#fig:img-clone_repo)Clone your github repository to the RStudio project 1.1.4 Download the template Download the psyTeachR Bookdown Course Template to you computer, unzip it, and move the files into the directory of your new RStudio project. 1.1.5 Edit the template 1.1.5.1 _output.yml Open _output.yml. It should look like this: bookdown::gitbook: default: true smart: false includes: after_body: include/webex.js css: [include/psyteachr.css, include/style.css] config: toc: collapse: section scroll_highlight: yes before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;Book Template&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;&lt;a href=&quot;https://psyteachr.github.io/&quot; target=&quot;blank&quot;&gt;PsyTeachR&lt;/a&gt;&lt;/li&gt; download: [] fontsettings: theme: white family: sans size: 2 sharing: facebook: yes twitter: yes google: no linkedin: no weibo: no instapaper: no vk: no all: [&#39;facebook&#39;, &#39;google&#39;, &#39;twitter&#39;, &#39;linkedin&#39;, &#39;weibo&#39;, &#39;instapaper&#39;] bookdown::pdf_book: includes: in_header: preamble.tex latex_engine: xelatex citation_package: natbib keep_tex: yes Change &quot;Book Template&quot; in the config:toc:before: section to the name of your book. This is the text readers will see at the top of your table of contents that brings them back to the start of the book. Save and close this file. 1.1.5.2 _bookdown.yml Open _bookdown.yml. It should look like this: book_filename: &quot;_main&quot; new_session: yes output_dir: &quot;docs&quot; before_chapter_script: [&quot;R/psyteachr_setup.R&quot;, &quot;R/my_setup.R&quot;] delete_merged_file: true clean: [] language: ui: chapter_name: &quot;Chapter &quot; label: fig: &#39;Figure &#39; tab: &#39;Table &#39; eq: &#39;Equation &#39; thm: &#39;Theorem &#39; lem: &#39;Lemma &#39; cor: &#39;Corollary &#39; prp: &#39;Proposition &#39; cnj: &#39;Conjecture &#39; def: &#39;Definition &#39; exm: &#39;Example &#39; exr: &#39;Exercise &#39; proof: &#39;Proof. &#39; remark: &#39;Remark. &#39; solution: &#39;Solution. &#39; You can change the chapter_name from &quot;Chapter &quot; to &quot;Lab &quot; or something else that makes sense for your course if you want. Leave the labels alone unless you're translating to another language. Save and close this file. 1.1.5.3 index.Rmd Open index.Rmd. The top YAML header should look like this: --- title: &quot;Template Course&quot; author: &quot;psyTeachR&quot; date: &quot;2019-01-28&quot; site: bookdown::bookdown_site documentclass: book bibliography: [book.bib, packages.bib] biblio-style: apalike link-citations: yes description: &quot;This is a template. Use it to start a new course book.&quot; --- Update the title, author, and description strings. For now, don't change anything in the R chunk at the top. Now you can edit the overview. Replace the filler text with a description of your course and fill in the course aims and ILOs. Save and close this file. 1.1.6 Render the book Now you're ready to create the book. Run the following code in the console. bookdown::render_book(&quot;index.Rmd&quot;) You'll see a lot of text in the console window, which should end in something that looks like: Output created: docs/index.html [1] &quot;/Users/lisad/rproj/psyteachr/book-template/docs/index.html&quot; The last line is the location of your new book. You can copy and paste that in a web browser to view the book. Alternatively, you can open the docs directory in the Files pane of RStudio, click on index.html, and choose View in Web Browser. (#fig:img-open_from_docs)Open your book from the Files pane in RStudio. 1.2 Adding chapters Create new chapters by creating new R Markdown files. Under the File menu in RStudio, choose New File and R Markdown.... Don't bother adding a title or changing any default settings; the first thing we'll do is delete all of the content. (#fig:img-new_rmd)Make a new chapter in a new .Rmd file 1.2.1 Automatic setup scripts Every .Rmd file automatically runs two scripts to load libraries you'll probably use on every page and set consistent styles for figures across books. The code is located in separate files, so you can make updates in a single place that affect every chapter. If there is a package you'll need in every chapter, you can add it to R/my_setup.R. Don't edit R/psyteachr_setup.R; this file is likely to need periodic updating and it is easier to just replace it than to figure out what changes you made. Any code in R/my_setup.R will be loaded after and overrule code in R/psyteachr_setup.R (e.g., if you want to set a different ggplot theme -- but please don't!). 1.2.2 Content Start your chapter with a level 1 header. This will be the chapter title. You can then continue to write your chapter in R Markdown. 1.2.3 Rendering a single chapter After you've added several chapters, the whole book might take a long time to render. If you want to quickly check the formatting on a single chapter, use the following code. bookdown::preview_chapter(&quot;02-style-guide.Rmd&quot;) 1.3 Adding appendices Add appendices in the same way as chapters. Just name them following the pattern appendix-a-name.Rmd. The file appendix-0.Rmd just contains the appendix header that groups appendices together (# (APPENDIX) Appendices {-}). You don't need to edit this, but you can delete this file if you are not going to use appendices. "],
["psyteachr-style-guide.html", "Chapter 2 PsyTeachR Style Guide 2.1 General styles 2.2 Word choice 2.3 Colour 2.4 Figures 2.5 Code chunks 2.6 Call-out Blocks", " Chapter 2 PsyTeachR Style Guide The following are specific recommendations to make our course materials look and act consistently to help students navigate more easily from one year to the next. These styles will be continuously evolving, so do discuss with the team if any recommendations don't meet your needs or you want to propose new recommendations. 2.1 General styles 2.1.1 Headers Level 1 headers (i.e., chapter titles) should be title case. The first letter of all words should be uppercase except articles, prepositions, and be verbs in the middle of the title (e.g., a, an, the, is, are in, on). Level 2 or higher headings should start with an uppercase letter (unless they are the name of a function or package that starts with a lowercase letter: e.g., tidyverse) and the rest of the heading should be lowercase (except proper nouns: e.g., RStudio, R, psyTeachR, Niamh). You can link to a header using the syntax [link text](#Header-title-with-dashes). If the header title is long, you can make a shorter reference by adding {#shortname} after the header and reference it like [link text](#shortname). You can reference the section by section number this way: \\@ref(shortname) and the number will automatically link to the section (e.g., Section 3.3). Chapters should usually have between three and eight level 2 headers. There will obviously be exceptions, but if you consistently have more or fewer sections, think about restructuring your content. See the section on special headers in the Bookdown book to learn how to divide your book into parts. 2.1.2 Text styles Emphasised text should be bold (e.g., **bold**) Avoid italics and underlining for dyslexia-friendly reading Exactly quoted names of buttons or interface objects should be bold code (e.g., **`bold code`**) Inline code should be in backticks (e.g., `backticks`) Put semi-colons at the end of list items for screen readers (the psyTeachR bookdown style does this automatically) 2.1.3 Lists Lists where most of the items fit on one line should start each line with an uppercase letter (unless the first word is code where case is important) and there should be no blank lines between items. * Item 1 * Item 2 * Item 3 Item 1 Item 2 Item 3 The psyTeachR style sheet automatically adds semicolons to the end of each list item for screen readers. 2.1.4 Tables Use knitr::kable() to output tibbles as a table. Set results='asis' in the code chunk header. Set the caption in the caption argument to kable and use \\@ref(tab:chunk-name) to reference the table (e.g., Table 2.1). iris %&gt;% group_by(Species) %&gt;% summarise_all(mean) %&gt;% knitr::kable(digits = 3, caption = &quot;Example table with kable.&quot;) Table 2.1: Example table with kable. Species Sepal.Length Sepal.Width Petal.Length Petal.Width setosa 5.006 3.428 1.462 0.246 versicolor 5.936 2.770 4.260 1.326 virginica 6.588 2.974 5.552 2.026 2.2 Word choice In general, use UK spelling and terminology. Use the colour version of functions in ggplot2. There is a lot of cultural variation in what we call punctuation. For psyTeachR books, use the conventions in Appendix A. Use the following conventions for proper nouns: RStudio R Markdown (this is how Yihui Xie writes it) LaTeX (you don't have to be fancy with \\({\\LaTeX}\\)) 2.3 Colour Logo colours are from the University of Glasgow palette. pink: #983E82 orange: #E2A458 yellow: #F5DC70 green: #59935B blue: #467AAC purple: #61589C If you are comfortable editing css and want to add styles with colour, you can add the theme colours to css with the keywords using this pattern: * &lt;span style=&quot;color: var(--purple);&quot;&gt;Some purple text&lt;/span&gt; * &lt;span style=&quot;background-color: var(--yellow);&quot;&gt;Yellow background&lt;/span&gt; Remember to test your materials with the Sepia and Night themes. Add additional styles for sepia (div.color-theme-1) and dark (div.color-theme-2) backgrounds. You can also access the psyTeachR colours in R from the function psyteachr_colours() (or psyteachr_colors()). psyteachr_colours() # gives all 6 colours psyteachr_colours(1:3) # specify colours by number c(&quot;pink&quot;, &quot;yellow&quot;, &quot;blue&quot;) %&gt;% # specify by name psyteachr_colours() # Lisa loves pipes ## [1] &quot;#983E82&quot; &quot;#E2A458&quot; &quot;#F5DC70&quot; &quot;#59935B&quot; &quot;#467AAC&quot; &quot;#61589C&quot; ## [1] &quot;#983E82&quot; &quot;#E2A458&quot; &quot;#F5DC70&quot; ## [1] &quot;#983E82&quot; &quot;#F5DC70&quot; &quot;#467AAC&quot; tibble( grp = rep(LETTERS[1:6], each = 20), val = rep(1:6, each = 20) + rnorm(20*6) ) %&gt;% ggplot(aes(grp, val, fill = grp)) + geom_violin() + scale_fill_manual(values = psyteachr_colours()) Figure 2.1: Plot with psyteachr.colours 2.4 Figures Use \\@ref(fig:chunk-name) to link to and reference the figure number in text (e.g., Figure 2.2). You can learn more about including figures and images in the Bookdown book. 2.4.1 R Plots Any graphs should be dynamically created in an R code block. Set echo=FALSE if you don't want to display the code that creates a plot. Default values are specified below; you don't have to include those unless you want to change them, but always set the fig.cap. out.width='100%' fig.align='center' fig.width=8 fig.height=5 fig.cap='**CAPTION THIS FIGURE!!**' ```{echo=FALSE, out.width='50%', fig.width=4, fig.height=2.5, fig.cap='Dynamically created plot.'} ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() + geom_smooth(method = lm) ``` Figure 2.2: Dynamically created plot. 2.4.2 Images Static images, like screenshots, should be stored in a directory called images and displayed using the knitr::include_graphics function in a code block. ```{r img-psyteacher-logo, echo=FALSE, fig.cap=&quot;PsyTeachR Logo&quot;} knitr::include_graphics(&quot;images/psyteachr_logo.png&quot;) ``` Figure 2.3: PsyTeachR Logo displayed by the previous code block. 2.4.3 Screenshots You'll probably want to include some screenshots of RStudio. For consistency, make sure your Rstudio is set to the default editor theme (Modern edotor with Text-Mate theme and Consolas font). Set the font size to at least 18 for readability in screenshots. (#fig:img-default_editor)Default RStudio editor settings. Keep panes in the default order. Upper left: Source Upper right: Environment, History, Connections, Build, Git Lower right: Files, Plots, Packages, Help, Viewer Lower left: Console (#fig:img-default_panes)Default RStudio pane layout. 2.5 Code chunks Always name your code chunks; this makes debugging easier and becomes the name of generated plots. You can duplicate chunk names between .Rmd files, but not within. 2.5.1 Options Code chunks can take several options The most common ones are explained below. Learn more about code chunks. eval: set to FALSE to skip running the code echo: set to FALSE to skip displaying the code include: set to FALSE to run but show no output (e.g., code, figures, messages, warnings) cache: set to TRUE if you have a code chunk that takes a long time to run. It should run if you make changes, but doesn't always. Delete your cache and render the book from scratch before you push major updates results &quot;hold&quot; to hold all the output pieces and display them after the code chunk (default for psyTeachR books) &quot;markup&quot; to intersperse code and output as they happen &quot;hide&quot; to hide output &quot;asis&quot; to write raw results (like the output of knitr::kable) 2.5.2 Including headers If you want to show students an example of a code chunk that includes the header, add an option called verbatim to your code chunk and set it equal to what you want displayed inside the curly brackets. Make sure you set eval=FALSE to stop the code chunk from being run. ```{r verbatim-example, eval = FALSE, verbatim = 'r chunk-name, messages=FALSE'} library(tidyverse) ``` The &quot;verbatim&quot; option is not standard to bookdown. It is only available if you include the code from the &quot;R/psyteachr_setup.R&quot; file. 2.6 Call-out Blocks The psyTeachR course book style includes four types of call-out blocks that you can use to emphasise text. 2.6.1 Danger ```{block, type=&quot;danger&quot;}Note dangerous things that will break code.``` Note dangerous things that will break code. 2.6.2 Warning ```{block, type=&quot;warning&quot;}Warn readers.``` Warn readers. 2.6.3 Info ```{block, type=&quot;info&quot;}Give further information.``` Give further information. 2.6.4 Try ```{block, type=&quot;try&quot;}Stop and try something.``` Stop and try something. "],
["webex.html", "Chapter 3 Webex 3.1 Fill-In-The-Blanks (fitb()) 3.2 Multiple Choice (mcq()) 3.3 True or False (torf()) 3.4 Hidden solutions and hints (hide() and unhide())", " Chapter 3 Webex Use the following code to install webex: devtools::install_github(&quot;dalejbarr/webex&quot;) The webex package is called in the setup chunk, so you don't need to call it on every page you want to use webex. 3.1 Fill-In-The-Blanks (fitb()) Create fill-in-the-blank questions using fitb(), providing the answer as the first argument. 2 + 2 is You can also create these questions dynamically, using variables from your R session. The square root of 25 is: The blanks are case-sensitive; if you don't care about case, use the argument ignore_case = TRUE. What is the letter after D? If you want to ignore differences in whitespace use, use the argument ignore_ws = TRUE and include spaces in your answer anywhere they could be acceptable.. How do you load the tidyverse package? You can set more than one possible correct answer by setting the answers as a vector. Type a vowel: 3.2 Multiple Choice (mcq()) &quot;Never gonna give you up, never gonna: let you go turn you down run away let you down&quot; &quot;I bless the rains guess it rains sense the rain down in Africa&quot; &quot;There's nothing that a hundred men on Mars or more named Marv could ever do&quot; 3.3 True or False (torf()) You can permute values in a vector using sample(). TRUE FALSE 3.4 Hidden solutions and hints (hide() and unhide()) Recreate the scatterplot below, using the built-in cars dataset. Figure 3.1: Recreate this scatterplot. I need a hint ?plot Solution with(cars, plot(speed, dist)) "],
["inclusion.html", "Chapter 4 Inclusion 4.1 Tips for text-readers 4.2 Dyslexia-friendly resources 4.3 Colour 4.4 Sex, gender and sexuality", " Chapter 4 Inclusion We want our resources to be accessible to everyone. This means thinking about accessibility with regards to disability, language, identity, and other characteristics. This is a work in progress; feel free to suggest additions. 4.1 Tips for text-readers Some students need to use text readers for accessibility; others just prefer this method. Here are some tips for improving their experience from the Dyslexia Style Guide. Use straight quotation marks Avoid roman numerals Avoid text in figures Bookdown books allow readers to change the font style, size, and background colour. This provides essential assessibility for some people, such as those with dyslexia or visual impairments. Therefore, avoid putting too much text in figures and provide descriptions of images in the figure caption. 4.2 Dyslexia-friendly resources British Dyslexia Association Dyslexia Style Guide Some recommendations are highlighted below. Avoid underlining, block capitals, and italics -- Use bold instead Use boxes and borders (call-out blocks) for effective emphasis Use left-justified with ragged right edge (don't full-justify) Use bullet points and numbering rather than continuous prose Use the active voice with concise, direct sentences Avoid abbreviations and provide a glossary of jargon 4.3 Colour You can check your images for how they look to people with different types of colourblindness with the Coblis Color Blindness Simulator. The &quot;pink&quot; and &quot;green&quot; colours from the psyteachr_colours() function are distinguishable by people with protanopia (red-blind), deuteronopia (green-blind), and tritanopia (blue-blind) colourblindness. You can also use viridis colours with ggplot2::scale_colour_viridis_d() and ggplot2::scale_fill_viridis_d() (for discrete colours) or ggplot2::scale_colour_viridis_c() and ggplot2::scale_fill_viridis_c() (for continuous colours). In plots, add secondary indicators in addition to colour, such as text labels or shapes. Figure 4.1: Text labels supplement colour information. Figure 4.2: Facet labels and redundant colour information. Figure 4.3: Supplement point colours with shapes. 4.4 Sex, gender and sexuality When teaching about experimental design, sex always used to be my go-to example of a two-level between-subjects factor. But this can make some people feel like their very existence is being ignored. In your examples, avoid implicitly assuming heterosexuality or binary gender. If you want to suggest an in-class exercise that uses data from the students, make sure to choose something that doesn't exclude anyone. Pet owners/non-pet owners Normally does/doesn't wear glasses Can/can't juggle Native/non-native English speakers Born in Scotland/elsewhere "],
["symbols.html", "A Symbols", " A Symbols Symbol psyTeachR Term Also Known As () (round) brackets parentheses [] square brackets brackets {} curly brackets squiggly brackets &lt;&gt; chevrons angled brackets / guillemets &lt; less than &gt; greater than &amp; ampersand &quot;and&quot; symbol # hash pound / octothorpe / slash forward slash \\ backslash - dash hyphen / minus _ underscore * asterisk star ^ caret power symbol ~ tilde twiddle / squiggle = equal sign == double equal sign . full stop period / point ! exclamation mark bang / not ? question mark ' single quote quote / apostrophe &quot; double quote quote | pipe vertical bar , comma ; semi-colon : colon @ &quot;at&quot; symbol various hilarious regional terms "],
["style-demo.html", "B Style Demo B.1 Header 2 B.2 Chunks", " B Style Demo Use this page to test styles if you change any defaults. Make sure to test with white, sepia and night themes. B.1 Header 2 Text with inline text styles, like bold, italics (don't use), bold code, inline code, link text and external link. Emojis: ❤️🧡💛💚💙💜 B.1.1 Header 3 bold italics bold code inline code external link link text B.1.1.1 Header B.1.1.1.1 Header 5 B.2 Chunks B.2.1 Code chunk with output # nonsense function to demo code style func_var &lt;- function(arg = FALSE) { string_var &lt;- &quot;I&#39;m a string&quot; int_var &lt;- 1L dbl_var &lt;- -3.165 * int_var bool_var &lt;- TRUE vector_var &lt;- 1:5 paste(string_var, int_var, sep = &quot; - &quot;) } func_var() as.numeric(&quot;A&quot;) ## Warning: NAs introduced by coercion rnorm(&quot;A&quot;) ## Warning in rnorm(&quot;A&quot;): NAs introduced by coercion ## Error in rnorm(&quot;A&quot;): invalid arguments ## [1] &quot;I&#39;m a string - 1&quot; ## [1] NA B.2.2 Code chunk with r header ```{r libraries, include=FALSE} library(tidyverse) ``` B.2.3 Preformatted line breaks and space are preserved Emojis are sometimes different: ❤️🧡💛💚💙💜 B.2.4 Call-out blocks danger: Note dangerous things that will break code. warning: Warn readers. info: Give further information. try: Stop and try something. "]
]
